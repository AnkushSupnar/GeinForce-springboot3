package com.geinforce.util;
import java.io.*;
import java.nio.file.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
public class PDBCombiner {
    public static List<String> readPDB(String fileContent) {
        List<String> lines = new ArrayList<>();
        for (String line : fileContent.split("\n")) {
            if (line.startsWith("ATOM") || line.startsWith("HETATM") || line.startsWith("TER") || line.startsWith("END")) {
                lines.add(line);
            }
        }
        return lines;
    }

    public static String combineStructures(List<String> proteinLines, List<String> ligandLines) {
        List<String> complexLines = new ArrayList<>();

        // Add protein lines
        for (String line : proteinLines) {
            if (!line.startsWith("END")) {
                complexLines.add(line);
            }
        }

        // Add TER after protein
        complexLines.add("TER");

        // Add ligand lines with renumbered atoms and residues
        int atomNumber = (int) complexLines.stream().filter(l -> l.startsWith("ATOM") || l.startsWith("HETATM")).count();
        int residueNumber = 1;
        for (String line : ligandLines) {
            if (line.startsWith("ATOM") || line.startsWith("HETATM")) {
                atomNumber++;
                String newLine = String.format("%-6s%5d%s%4d%s",
                        line.substring(0, 6),
                        atomNumber,
                        line.substring(11, 21),
                        residueNumber,
                        line.substring(26));
                complexLines.add(newLine);
            }
        }

        // Add final TER and END
        complexLines.add("TER");
        complexLines.add("END");

        return String.join("\n", complexLines);
    }

    public static String addHeader(String complexContent, String proteinName, String ligandName) {
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String header = "REMARK   Generated By GeinDock Suite v1.0 \n";
        header += "REMARK   Date: " + now.format(formatter) + "\n";
        return header + complexContent;
    }

    public static void saveComplex(String complexContent, String filename) throws IOException {
        Files.write(Paths.get(filename), complexContent.getBytes());
        System.out.println("Complex saved as " + filename);
    }
    public static void main(String[] args) {
        
                       
            try {
                // Read protein file
                System.out.println("Reading protein PDB file...");
                
                String proteinFile = "D:\\RMI\\ankushsupnar@gmail.com\\1726339221571\\protein\\1726339221571_protein_clean.pdb";
                String proteinContent = new String(Files.readAllBytes(Paths.get(proteinFile)));

                // Read ligand file
                System.out.println("Reading ligand PDB file...");
                String ligandFile = "D:\\RMI\\ankushsupnar@gmail.com\\1726339221571\\output\\complex_lig\\1726339221571_Conformer3D_COMPOUND_CID_243_1.pdb";
                String ligandContent = new String(Files.readAllBytes(Paths.get(ligandFile)));

                // Process the files
                List<String> proteinLines = readPDB(proteinContent);
                List<String> ligandLines = readPDB(ligandContent);

                // Combine structures
                String complexContent = combineStructures(proteinLines, ligandLines);

                // Add header
                complexContent = addHeader(complexContent, proteinFile, ligandFile);

                // Save the complex file
                saveComplex(complexContent,"D:\\RMI\\ankushsupnar@gmail.com\\1726339221571\\output\\complex.pdb");

                System.out.println("Complex generation complete. The complex.pdb file has been saved.");
            } catch (IOException e) {
                System.err.println("An error occurred: " + e.getMessage());
                e.printStackTrace();
            }
    
    
    
    }
}